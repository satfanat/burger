Alap HTML elemek

<!DOCTYPE html>
<html lang="hu">			 	  		   	#html keret eleje és a dokumentum nyelvve
<head> 										 #fejrész eleje
<title>Oldal címe</title>					 #cím
<meta charset="UTF-8">						 #karakter kódolás
<meta name=" " content=" ">					 #kulcsszavak, rövid leírás
<link rel="stylesheet" href="valami.css">    #külső CSS file útvonal
</head> 									 #fejrész vége
<body>										 #tartalom eleje	 
</body>										 #tartalom vége
<footer> </footer>							 #lábléc
</html> 									 #html keret vége

<h1>   </h1>										    	 #címsorok h1, h2, h3, h4, h5, h6
<p>    </p>													 #szöveg elem előtte - utána margó van
<p style="color:blue">Szöveg</p>							 #szöveg színe(kék)	
<p title="Alternatív"> Eredeti szöveg</p>					 #alternatív szöveg egér alatt
<p> elso<br>masodik </p> 								     #sortörés szöveg közben
<pre>    </pre>	  											 #formázott szöveg
<a href="http://www.horvatorszagonline.hu">Egy link</a>		 #link egy oldalra - "a" elem
target="_blank"			#megnyitás új ablakban
target="_self"			#megnyitás a meglévő helyén (alapértelmezett)
target="_parent"		#
target="_top"			#



<img src="kep.jpg" alt="szöveg" width="500" height="200">	 #kép beillesztése szöveggel és mérettel

Attributumok
alt			# alternatív szöveg
disabled	# nem jelenik meg
href	    # link
id	        # egyedi azonosító (a CSS #után hivatkozik rá)
src	   		# kép forrás helye
style	    # szöveg stílus (CSS, méret , szín)
title	    # alternatív szöveg egér alatt

<style> </style>		#stílusok helye ha nincs külön CSS
color					#szín
background-color		#háttér szín
border-color			#keret szín
border-color			#keret vastagság
font-family				#betű típus
font-size				#betű méret
text-align 				#szöveg igazítás (center, left, right)	
padding					#kereten belüli távolság
margin 					#kereten kívüli távolság
class="valami"			#osztály amire majd a CSS hivatkozik .után
float					#kép megjelenés (left, right)
background-image		#háttérkép
background-repeat		#háttérkép ismétlés
background-attachment	#háttérkép pozíció
background-size			#háttérkép méret

Szöveg formázás
<b>	</b>			#félkövér
<strong> </strong>	#kiemelt, ugyanúgy félkövér
<i>	 </i>			#dőlt
<em> </em>			#mint a dőlt
<mark> </mark>		#kiemelt háttér
<del> </del>		#áthúzott szöveg
<ins> </ins>		#aláhúzott szöveg
<sub> </sub>		#alsó kitevő szövege
<sup> </sup> 		#felső kitevő szövege
<q> </q>			#szöveg idézőjelben
<blockquote> </blockquote>	#idézet
<abbr>  </abbr>				#rövidítés hosszabb szövege
<address> </address>		#lakcímet írnak közé
<cite> </cite>				#cím
<bdo> </bdo>				#szöveg irány

<hr>     					# vízszintes vonal, elválasztó
<!-- Komment -->			 #megjegyzés a kódban


<table>							#táblázat eleje
<thead>							#táblázat fejléc eleje
  <tr>							#sor eleje
    <th>Firstname</th>			#oszlop címe
    <th>Lastname</th>			#oszlop címe
    <th>Age</th>				#oszlop címe
  </tr>							#sor vége
</thead>						#táblázat fejléc vége 
<tbody>							#táblázat tartalom eleje 
   <tr>							#sor eleje
    <td>Jill</td>				#oszlop szöveg
    <td>Smith</td>				#oszlop szöveg
    <td>50</td>					#oszlop szöveg
  </tr>							#sor vége
</tbody>						#táblázat tartalom vége  
</table>						#táblázat vége

 <th rowspan="2">Szöveg</th>	#sor összevonás
 <th colspan="2">Szöveg</th>	#oszlop összevonás
<caption> </caption>			#táblázat felirat
  
<ul>						#rendezetlen felsorolás eleje
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ul>						#rendezetlen felsorolás eleje

<ol>						#rendezett felsorolás eleje
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ol>   					#rendezett felsorolás vége									   	

<div> </div>				 #szövegdoboz
<span> </span>				 #szövegrész formázása
<iframe src="URL"></iframe>	 #Iframe beillesztés
<script> </script>			 #script beillesztés
<noscript> </noscript>		 #alternatív szöveg, ha nem indul a script

&nbsp;						 #üres sor

<form>  					#ürlap eleje
<label> szöveg </label>		#mező felirata
<input type="text"			#szöveg mezője
<input type="radio">		#választó (rádió) gomb
<input type="submit">		#elfogadom gomb
<input type="button">
<input type="checkbox">
<input type="color">		#szín választó
<input type="date">
<input type="datetime-local">
<input type="email">
<input type="file">
<input type="hidden">
<input type="image">
<input type="month">
<input type="number">
<input type="password">
<input type="range">
<input type="reset">		#eredeti szöveg visszaállítása
<input type="search">
<input type="tel">
<input type="time">
<input type="url">
<input type="week">


<select>					legördülő menü eleje
<option value="1">1</option>#legördülő menü elem
<option value="2">2</option>#legördülő menü elem
</select>					#legördülő menü eleje
<textarea> </textarea>		#szöveg doboz kitöltendő
</form>						#ürlap vége
<button> </button>		    #gomb beillesztése
<fieldset> </fieldset>		#űrlap keret
<legend> </legend>			#űrlap keretének szövege
<datalist> </datalist>		#menüben megjelenő szöveg







VÁLTOZÓK	
	
function valami(){  } - függvény létrehozása, tartalom a kapcsos zárójelben	
let - változó létrehozása értékkel, vagy anélkül
string(szám); - szám sztringgé alakítása
változóNeve.toString() - változó sztringgé alakítása
number(változó) - változó számmá alakítása, ha lehetséges (explicit módon)
typeof változó - változó típusának lekérdezése (string, szám. boolean stb.)
változóNeve.toFixed(2) - number változó értékének kerekítése 2 tizedesre
változóNeve.toPrecision(3) - number változó értékének kerekítése és vágása 3 számjegyűre (tizedessel együtt)	
document.querySelector - html elem kiválasztása
valami.innerHTML = változó; - html elem megváltoztatása
parseInt() - számmá alakítás egész számmá
parseFloat() - számmá alakítás tizedessel
const - konstans érték
alert("valami" + változó) - felugró alakban üzenet + a változó értéke
<button onclick="függvény neve()" type="button">Szöveg</button> -  kattintásra indul a függvény
document.querySelector("input[name='valami']"); - html dokumentumban egy input elem nevének kiválasztása
let változó = document.querySelector("input[name='css osztály neve']"); - kiválasztott elem változóvá tétele
változó.value - változó értékének kiolvasása sztringen
változó.innerHtml = másikváltozó; - változó értékét beírja egy Html elembe

METÓDUSOK:

változó.length; - változó karaktereinek száma
változó.trim(); - változó szóközeinek levágása
változó.concat(valtozo2); - változók egyesítése, összefűzése
változó.toLowerCase(); - változó kisbetűre alakítása
változó.toUpperCase(); - változó nagybetűre alakítása
változó.indexOf("valami"); - szöveg keresése a változóban
változó.replace("valamiről", "valamire"); - szöveg cseréje a változóban
Boolean(változó) - ha nem nulla szám vagy nulla db karakter akkor true
! - tagadás
== - engyenlőség
!= - nem egyenlő
&& - és
|| - vagy
if - ha
else if - különben ha
else - akkor
isNan(változó) - megmondja hogy Nan vagy nem Nan a változó értéke
változó = isNaN(változó) ? érték : változó; - ha a változó értéke NaN, akkor a változó helyére beírja az értéket
// - komment

Tömbök metódusai
változó.push("valami"); - a tömb végére adja hozzá a valamit (új elemet)
változó.pop();          - törli a tömb utolsó elemét
változó.unshift("valami"); - a tömb elejére adja hozzá a valamit (úje elemet)
változó.shift();          - törli a tömb első elemét

FÜGGVÉNYEK

function név() {függvény törzse}; - függvény létrehozása
függvény neve(); - a függvény elindítása

let - block scope típusú
var - object scope típusú






TÖMBÖK

let tömb = ["x", "y", "z"]; - tömb létrehozása, lehet string, number, boolean, null is
tömb[2] - meghívja a tömb 2.-ik elemét (valójában a harmadikat mert 0-val kezdődik)
Array.isArray(tömbneve) - megmondja a változóról hogy tömb vagy nem tömb
tömb.push("újelem") - a tömb végére hozzáad egy új elemet
tömb.pop() - a tömb végéről elvesz egy elemet
tömb.unshift("újelem") - a tömb elejéhez hozzáad egy új elemet
tömb.shift() - a tömb elejéről elesz elvesz egy elemet
tömb.slice(0, 2); - a tömbből kivágja a 0-től 2-ig tartozó elemeket, 2-es már nem lesz benne, új tömböt alkot az eredeti nem változik
tömb.splice(1, 2); - a tömbből kivág az 1-el kezdődően 2 db elemet, az eredeti tömböt írja felül
tömb.splice(1, 0, "valami"); - a tömbből kivág az 1-es helyről 0 db elemet, és hozzáadja a valamit (a helyére) az eredeti tömböt írja felül
tömb.join(", "); - tömb elemeit stringgé alakítja (összefűzi őket) 
tömb.length - tömb elemeinek száma

CIKLUSOK
for (let i = 0; i < 5; i++) - i=0 kezdőérték, i<5 - feltétel addig fut amig i<5, i++ - növeld eggyel az értéket ha lefutott a ciklus
continue, break parancsok a ciklus megszakításához

változó = változó + 10    rövidebben     változó += 10  - összetett operátor
változó = feltétel ? haigaz : hahamis; - ternary operator


ÖSSZEGZŐ ALGORITMUS
let tömb = [1, 2, 5, 3, 9, 7, 4];                       - tömb létrehozása
let változó = 0;                                        - akkumulátor változó létrehozása
for (let i = 0; i < tömb.length; i++) {
változó += tömb[i];                                     - for ciklus, benne függvény létrehozása
}
console.log(változó) -                                  - változó kiírása konzolra


SZÁMLÁLÓ ALGORITMUS
let tömb = [1, 2, 5, 3, 9, 7, 4];                       - tömb létrehozása
let változó = 0;                                        - akkumulátor változó létrehozása
for (let i = 0; i < tömb.length; i++) {
if (tömb[i] % 2 == 0) {
változó ++;}                                            - for ciklus, benne függvény (feltétel) létrehozása (pl. páros számok darabja)
}
console.log(változó) -                                  - változó kiírása konzolra

 
SZÉLSŐÉRTÉK SZÁMÍTÓ ALGORITMUS
let tömb = [1, 2, 5, 3, 9, 7, 4];                       - tömb létrehozása
let változó = tömb[0];                                  - ez a aváltozó legyen a tömb első eleme
for (let i = 0; i < tömb.length; i++) {
if (tömb[i] > változó) {
változó = tömb[i];}                                      - for ciklus, benne függvény (feltétel) létrehozása (pl. legnagyobb szám)
}
console.log(változó) -                                  - változó kiírása konzolra

ELDÖNTŐ ALGORITMUS
let tömb = [1, 2, 5, 3, 9, 7, 4];                       - tömb létrehozása
let változó = false;                                    - ez a aváltozó legyen a tömb első eleme
for (let i = 0; i < tömb.length && változó == false; i++) {
if (tömb[i] = 5) { 
változó = true;}                                        - for ciklus, benne függvény (feltétel) létrehozása (pl. van-e benne 5)
}
console.log(változó) -                                  - változó kiírása konzolra


OBJEKTUMOK

let valami = { }; - új üres valami nevű objektum létrehozása
let valami = {kulcs: érték, kulcs2: érték2, kulcs3: érték3}; - valami nevű objektum értékekkel, a kulcs mindig string lehet
valami.kulcs2 - a valami nevű objektum kulcs2 nevű kulcsának lehívása
valami["kulcs2"] - ugyanaz mint az előző
Object.keys( valami ); - megmutatja, hogy a valami nevű objektumnak milyen kulcsai vannak
Object.values( valami ); - megmutatja, hogy a valami nevű objektumnak milyen értékei vannak
Object.entries( valami ); - megmutatja, hogy a valami nevű objektumnak milyen értékei és kulcsai vannak (tömb formátumban) entrie - kulcs - érték=értékpár
Object.entries( valami )[1]; - megmutatja hogy a valami nevű objektumban mi a második kulcs és értéke
Object.entries( valami )[1][0]; - megmutatja hogy a valami nevű objektumban a második kulcsot (érték nélkül)
Object.keys(valami).length; - megmutatja, hogy a valami nevű objektumnak hány kulcsa van (előszőr tömböt csinál belőle hogy megszámolhassa mert az objekttumnak nincs length formátuma)
Object.values(valami).length; - megmutatja, hogy a valami nevű objektumnak hány értéke van (előszőr tömböt csinál belőle hogy megszámolhassa)
valami = {}; - valami nevű objektum tartalmának törlése, (a zárójelbe írje megváltoztathatom az értékeket)
const valami; = {kulcs: érték, kulcs2: érték2, kulcs3: érték3}; - valami nevű objektum létrehozása értékekkel, később csak az objektum tartalma lesz változtatható a neve nem!
for (let k in valami);  - for in ciklus, működik objektumra és tömbre is, a kulcsokat listázza?
for (let k of valami);  - for in ciklus, működik objektumra és tömbre is, az értékeket listázza?
for (let k of Object.keys(valami)); - kiolvassa a valami objektumból a kulcsokat
for (let k of Object.values(valami)); - kiolvassa a valami objektumból a kulcsokat
for (let k of Object.entries(valami)); - kiolvassa a valami objektumból az értékpárokat
this - ?????????? rámutat valamire a változó neve helyett lehet használni
$ - arrow function, function helyett => jelet használni,és a függvény kapcsos zárójele is elhagyható

DOM

document.getElementById("valami id") - elem keresése id alapján
document.getElementsByName("valami neve") - elem keresése név alapján, eredménye tömb lesz
document.getElementsByClassName("valami-osztály") - elem keresése osztály alapján, eredménye tömb lesz
document.getElementsByTagName("html elem") - elem keresése HTML elemre (pl h1, h3) eredménye tömb lesz
document.querySelector(".css osztály") - elem keresése HTML elemre? ezt szokták használni, eredmény element nevű objektum

BACKEND
npm install lodash - lodash telepítése konzolon, lokális telepítés egy mappába
npm install express-generator -g - globális telepítés
const változó = require('lodash'); - lodash betöltése js fileba
npm init -y   - package.json file létrehozása
npm remove lodash   - lodash eltávolítása
install -g json-server - a json-server telepítése globálisan
npx json-server --watch ./db/db.json - figyeli a JSON fájlt a szerver, ha módosul

JSON.parse(változó) - stringől készít objektumot
JSON.stringify(változó) - objektumból készít stringet
setTimeout() => {függvény}, 3000); - 3 mp késleltetés beállítása



